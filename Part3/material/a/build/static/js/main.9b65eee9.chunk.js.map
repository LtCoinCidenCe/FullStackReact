{"version":3,"sources":["components/Note.js","service/notes.js","components/Notification.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","baseUrl","noteService","getAll","request","axios","get","nonExisting","id","date","then","response","data","concat","create","newObject","post","update","put","Notification","message","Footer","style","color","fontStyle","fontSize","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","initialNotes","notesToShow","filter","map","find","n","changedNote","returnedNote","catch","error","setTimeout","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","Date","toISOString","Math","random","value","onChange","console","log","target","type","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9b65eee9.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Note = ({ note, toggleImportance }) => {\r\n  const label = note.important\r\n    ? 'make not important' : 'make important'\r\n\r\n  return (\r\n    <li className='note'>\r\n      {note.content} \r\n      <button onClick={toggleImportance}>{label}</button>\r\n    </li>\r\n  )\r\n}\r\n\r\nexport default Note;\r\n","import axios from 'axios'\r\nconst baseUrl = '/api/notes'\r\n\r\nconst getAll = () =>\r\n{\r\n  const request = axios.get(baseUrl)\r\n  const nonExisting = {\r\n    id: 10000,\r\n    content: 'This note is not saved to server',\r\n    date: '2019-05-30T17:30:31.098Z',\r\n    important: true,\r\n  }\r\n  return request.then(response => response.data.concat(nonExisting))\r\n}\r\n\r\nconst create = newObject =>\r\n{\r\n  const request = axios.post(baseUrl, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, newObject) =>\r\n{\r\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\n// export default { \r\n//   getAll: getAll, \r\n//   create: create, \r\n//   update: update \r\n// }\r\n\r\nconst noteService = { getAll, create, update };\r\nexport default noteService;\r\n","const Notification = ({ message }) =>\r\n{\r\n  if (message === null)\r\n  {\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <div className=\"error\">\r\n      {message}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Notification;\r\n","import React, { useState, useEffect } from 'react';\nimport Note from './components/Note';\nimport noteService from './service/notes';\nimport Notification from './components/Notification';\n\nconst Footer = () =>\n{\n  const footerStyle = {\n    color: 'green',\n    fontStyle: 'italic',\n    fontSize: 16\n  }\n  return (\n    <div style={footerStyle}>\n      <br />\n      <em>Note app, Department of Computer Science, University of Helsinki 2021</em>\n    </div>\n  )\n}\n\nconst App = () =>\n{\n  const [notes, setNotes] = useState([])\n  const [newNote, setNewNote] = useState(\n    'a new note...'\n  )\n  const [showAll, setShowAll] = useState(true);\n  const [errorMessage, setErrorMessage] = useState('some error happened...');\n\n  const hook = () =>\n  {\n    // console.log('effect')\n    // const eventHandler = (response) =>\n    // {\n    //   console.log('promise fulfilled');\n    //   setNotes(response.data);\n    // }\n    // const promise = axios.get('http://localhost:3001/notes');\n    // promise.then(eventHandler);\n    noteService.getAll().then(initialNotes => { setNotes(initialNotes) });\n  }\n\n  useEffect(hook, [])\n\n\n  const toggleImportanceOf = id =>\n  {\n    // const url = `http://localhost:3001/notes/${id}`\n    const note = notes.find(n => n.id === id)\n    const changedNote = { ...note, important: !note.important }\n\n    noteService\n      .update(id, changedNote)\n      .then(returnedNote =>\n      {\n        setNotes(notes.map(note => note.id !== id ? note : returnedNote))\n      })\n      .catch(error =>\n      {\n        setErrorMessage(\n          `Note '${note.content}' was already removed from server`\n        )\n        setTimeout(() =>\n        {\n          setErrorMessage(null)\n        }, 5000)\n        setNotes(notes.filter(n => n.id !== id));\n      })\n    // axios.put(url, changedNote).then(response =>\n    // {\n    //   // note returned\n    //   setNotes(notes.map(note => note.id !== id ? note : response.data)) // array.map just to replace the new note\n    // })\n  }\n\n  const handleNoteChange = (event) =>\n  {\n    console.log(event.target.value);\n    setNewNote(event.target.value)\n  }\n\n  const addNote = (event) =>\n  {\n    event.preventDefault()\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() < 0.5\n    }\n\n    noteService.create(noteObject).then(returnedNote =>\n    {\n      setNotes(notes.concat(returnedNote));\n      setNewNote('');\n    })\n    // axios\n    //   .post('http://localhost:3001/notes', noteObject)\n    //   .then(response =>\n    //   {\n    //     setNotes(notes.concat(response.data)) // new note returned\n    //     setNewNote('')\n    //   })\n  }\n\n  const checkImportant = (note) =>\n  {\n    if (note.important === true)\n      return true;\n    else\n      return false;\n  }\n\n  const notesToShow = showAll ? notes : notes.filter(checkImportant);\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <Notification message={errorMessage} />\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? 'important' : 'all'}\n        </button>\n      </div>\n      <ul>\n        {notesToShow.map(note =>\n          <Note key={note.id} note={note} toggleImportance={() => toggleImportanceOf(note.id)} />  // Here the key is the attr of Note: element in the array\n        )}\n      </ul>\n      <form onSubmit={addNote}>\n        <input value={newNote} onChange={handleNoteChange} />\n        <button type=\"submit\">save</button>\n      </form>\n      <Footer />\n    </div>\n  )\n}\n\nexport default App\n","import ReactDOM from 'react-dom'\nimport App from './App.js'\nimport './index.css'\n// import axios from 'axios'\n\n// const promise = axios.get('http://localhost:3001/notes')\n// console.log(promise)\n// promise.then(response => {\n//   console.log(response)\n// })\n\n// axios\n//   .get('http://localhost:3001/notes')\n//   .then(response => {\n//     const notes = response.data\n//     console.log(notes)\n//   })\n\n// axios.get('http://localhost:3001/notes').then(response => {\n//   const notes = response.data\n//   ReactDOM.render(\n//     <App notes={notes} />,\n//     document.getElementById('root')\n//   )\n// })\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}